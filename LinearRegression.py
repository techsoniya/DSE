import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
------------------------------------------------------------------------------------------------------
dataset= pd.read_csv("Advertising.csv")
------------------------------------------------------------------------------------------------------
dataset.head()

OUTPUT
	Unnamed: 0	TV	Radio	Newspaper	Sales
0	1	230.1	37.8	69.2	22.1
1	2	44.5	39.3	45.1	10.4
2	3	17.2	45.9	69.3	9.3
3	4	151.5	41.3	58.5	18.5
4	5	180.8	10.8	58.4	12.9
------------------------------------------------------------------------------------------------------
dataset.shape


OUTPUT
(200, 5)
------------------------------------------------------------------------------------------------------
dataset.isna().sum()

OUTPUT
Unnamed: 0    0
TV            0
Radio         0
Newspaper     0
Sales         0
dtype: int64
------------------------------------------------------------------------------------------------------
dataset.duplicated().any()

OUTPUT
False
------------------------------------------------------------------------------------------------------
fig,axs=plt.subplots(3,figsize=(5,5))
plt1=sns.boxplot(dataset['TV'],ax=axs[0])
plt2=sns.boxplot(dataset['Newspaper'],ax=axs[1])
plt3=sns.boxplot(dataset['Radio'],ax=axs[2])
plt.tight_layout()


OUTPUT
output1.png
-------------------------------------------------------------------------------------------------------
sns.distplot(dataset['Sales']);

OUTPUT
graph2.png
-------------------------------------------------------------------------------------------------------
sns.pairplot(dataset,x_vars=['TV','Radio','Newspaper'],y_vars='Sales',height=4,aspect=1,kind='scatter')
plt.show()

OUTPUT
graph3.png
-------------------------------------------------------------------------------------------------------
sns.heatmap(dataset.corr(),annot=True)
plt.show()


OUTPUT
graph4.png
-------------------------------------------------------------------------------------------------------
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
-------------------------------------------------------------------------------------------------------
x=dataset[['TV']]
y=dataset['Sales']
-------------------------------------------------------------------------------------------------------
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=100)
-------------------------------------------------------------------------------------------------------
slr=LinearRegression()
slr.fit(x_train,y_train)

OUTPUT
LinearRegression()
-------------------------------------------------------------------------------------------------------
print('Intercept:',slr.intercept_)
print('Coefficient:',slr.coef_)

OUTPUT
Intercept: 6.989665857411679
Coefficient: [0.04649736]
--------------------------------------------------------------------------------------------------------
print('Regression Equation: Sales= 6.989+0.046*TV')

OUTPUT
Regression Equation: Sales= 6.989+0.046*TV
--------------------------------------------------------------------------------------------------------
plt.scatter(x_train,y_train)
plt.plot(x_train,6.989+0.046*x_train,'r')
plt.show()


OUTPUT
graph5.png
--------------------------------------------------------------------------------------------------------
y_pred_slr=slr.predict(x_test)
x_pred_slr=slr.predict(x_train)
--------------------------------------------------------------------------------------------------------
print("Prediction for test set: {}".format(y_pred_slr))


OUTPUT
Prediction for test set: [ 7.35234526 18.06533671 13.27610876 17.11214086 18.22807747 16.60531965
 13.4620982  16.17754395 17.05169429 17.07029323 12.4391563  17.66080969
  9.60281742 15.72186983 11.04423554 11.36971705 13.95032046 14.90351632
 14.59198401 12.23921766 16.97264878 13.00642408 16.07524976 15.21969836
 15.58702749 17.23303399 17.20978531 10.49091697 15.58702749 12.71349072
 10.1700852  10.19798361 12.61584627 15.74976825  9.31453379 12.59259759
 11.50920913 14.81982107 17.33067844 15.97295557 17.00519693 15.15925179
 14.63848137 17.14933874 12.57864838 11.16047894  7.77547122 18.55820871
 10.27237939  8.76586496 16.405381   14.95466341 10.4816175  13.08546959
 16.78665935  9.05879832  7.78942043  8.17999824 16.17754395 10.9744895 ]

--------------------------------------------------------------------------------------------------------
slr_diff=pd.DataFrame({'Actual Value':y_test,'Predicted Value': y_pred_slr})
slr_diff

OUTPUT
Actual Value	Predicted Value
126	6.6	7.352345
104	20.7	18.065337
99	17.2	13.276109
92	19.4	17.112141
111	21.8	18.228077
167	12.2	16.605320
116	12.2	13.462098
96	11.7	16.177544
52	22.6	17.051694
69	22.3	17.070293
164	11.9	12.439156
124	19.7	17.660810
182	8.7	9.602817
154	15.6	15.721870
125	10.6	11.044236
196	9.7	11.369717
194	17.3	13.950320
177	11.7	14.903516
163	18.0	14.591984
31	11.9	12.239218
11	17.4	16.972649
73	11.0	13.006424
15	22.4	16.075250
41	17.1	15.219698
97	15.5	15.587027
128	24.7	17.233034
133	19.6	17.209785
82	11.3	10.490917
139	20.7	15.587027
123	15.2	12.713491
83	13.6	10.170085
65	9.3	10.197984
151	11.6	12.615846
162	14.9	15.749768
170	8.4	9.314534
77	14.2	12.592598
32	9.6	11.509209
173	11.7	14.819821
174	11.5	17.330678
85	15.2	15.972956
168	17.1	17.005197
112	14.1	15.159252
171	14.5	14.638481
181	12.2	17.149339
7	13.2	12.578648
46	10.6	11.160479
75	8.7	7.775471
28	18.9	18.558209
29	10.5	10.272379
195	7.6	8.765865
40	16.6	16.405381
153	19.0	14.954663
115	12.6	10.481617
64	18.0	13.085470
59	18.4	16.786659
1	10.4	9.058798
192	5.9	7.789420
136	9.5	8.179998
152	16.6	16.177544
161	13.3	10.974490

----------------------------------------------------------------------------------------------------------------

slr.predict([[56]])


OUTPUT

array([9.59351795])

--------------------------------------------------------------------------------------------------------------

from sklearn.metrics import accuracy_score
print('R sqaured value of the model: {:.2f}'.format(slr.score(x,y)*100))


OUTPUT
R sqaured value of the model: 61.02

